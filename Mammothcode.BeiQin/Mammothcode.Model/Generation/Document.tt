<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)\Refrences\Dapper.dll" #>
<#@ assembly name="$(SolutionDir)\Refrences\MySql.Data.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#@ import namespace="Dapper" #>
<#@ output extension=".html" #>

<#
	//数据库连接字符串
		var connectionString = "server=rm-bp16hgp1ext33r96b2o.mysql.rds.aliyuncs.com;user id=mammothcode;password=Jiuxian20180920;database=mammothcode_photobook;";
#>

<#
	DefaultTypeMap.MatchNamesWithUnderscores = true;
	var connection = new MySqlConnection(connectionString);
	var database = connection.Database;
	var queryTables = string.Format("SELECT TABLE_NAME,TABLE_TYPE,TABLE_COMMENT from INFORmation_schema.TABLES WHERE TABLE_SCHEMA='{0}'", connection.Database);
	var queryColumns = string.Format("SELECT TABLE_NAME,COLUMN_NAME,COLUMN_COMMENT,COLUMN_DEFAULT,IS_NULLABLE,DATA_TYPE,COLUMN_TYPE,COLUMN_KEY,EXTRA FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='{0}'", connection.Database);
	var tables = connection.Query<TableInfo>(queryTables).ToList();
	var columns = connection.Query<ColumnInfo>(queryColumns).ToList();	
#>

<html>
<head>
    <meta charset="UTF-8">
    <title></title>
    <style>
        td, tr {
            background: #50aca2;
            color: #fff;
            border-bottom-width: 0;
            text-align: center;
            height: 2.2rem;
        }

        tbody tr td {
            color: black;
            background: #e5efeb;
        }

        td, tr {
            padding-left: 20px;
            padding-right: 20px;
        }
    </style>
</head>

<body>
<#foreach(var table in tables){#>
	<div style="text-align:center;margin:50px 0 20px;">
		<a><#=tables.IndexOf(table)+1#>、</a>
        <a>数据库：<#=database#></a>
		<a>数据表：<#=table.TableName#></a>
		<a style="color:green;">说明：<#=table.TableComment#></a>
        <a>更新时间：<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#></a>
    </div>
    <table border="1" id="dataTable" style=" border-collapse:collapse;border-spacing:0; border:1px  solid  #FFFFFF;" align="center" width="80%">
        <thead>
            <tr>
                <td>CSharpName</td>
				<td>JsonName</td>
                <td>ColumnName</td>
                <td>CShaprType</td>
                <td>DataType</td>
                <td>PrimaryKey</td>
                <td>Identity</td>
                <td>IsNull</td>
                <td>Remark</td>
            </tr>
        </thead>
        <tbody>
			<#foreach(var column in columns.FindAll(f=>f.TableName==table.TableName)){#>
				<tr>
					<td><#=Utils.Pascal(column.ColumnName)#></td>
					<td><#=Utils.Camel(column.ColumnName)#></td>
					<td><#=column.ColumnName#></td>
					<td><#=Utils.GetCSharpType(column.DataType)#></td>
					<td><#=column.ColumnType#></td>
					<td><#=column.ColumnKey#></td>
					<td><#=column.Extra#></td>
					<td><#=column.IsNullable#></td>
					<td><#=column.ColumnComment#></td>
				</tr>
			<#}#>
        </tbody>
    </table>	
	
<#}#>
  
</body>
</html>







<#+
    public class TableInfo
    {
        public string TableName { get; set; }
        public string TableType { get; set; }
        public string TableComment { get; set; }
    }
    public class ColumnInfo
    {
        public string TableName { get; set; }
        public string ColumnName { get; set; }
        public string ColumnComment { get; set; }
        public string ColumnDefault { get; set; }
        public string IsNullable { get; set; }
        public string ColumnType { get; set; }
        public string DataType { get; set; }
        public string ColumnKey { get; set; }
		public string Extra { get; set; }
    }
    public static class Utils
    {
		//字段类型映射
        public static string GetCSharpType(string columnType)
        {
            var type = "object";
            switch (columnType)
            {
                case "varchar": type = "string"; break;
                case "text": type = "string"; break;
				case "tinytext": type = "string"; break;
				case "char": type = "string"; break;
				case "tinyint": type = "int?"; break;
				case "smallint": type = "int?"; break;
                case "int": type = "int?"; break;
				case "integer": type = "int?"; break;
				case "bigint": type = "int?"; break;
				case "mediumint": type = "int?"; break;
				case "real": type = "float?"; break;
				case "float": type = "float?"; break;
				case "double": type = "double?"; break;
				case "decimal": type = "decimal?"; break;
				case "date": type = "DateTime?"; break;
				case "datetime": type = "DateTime?"; break;
				case "json": type = "string"; break;
            }
            return type;
        }
		//Pacsl命名转换
        public static string Pascal(string name)
        {
            var list = new List<string>();
            foreach (var item in name.Split('_'))
            {
                list.Add(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(item.ToLower()));
            }
            return string.Join("",list);
        }
		//Camel命名转换
		public static string Camel(string name)
		{
			name = Pascal(name);			
            return char.ToLower(name[0]) + name.Substring(1);
		}
    }
#>